{
  "connectionTest": {
    "main": {
      "message": "Hello, this is a connection test.",
      "temperature": 0.7,
      "maxTokens": 100,
      "useFastModel": false
    },
    "fast": {
      "message": "Test",
      "temperature": 0.7,
      "maxTokens": 50,
      "useFastModel": true
    }
  },
  "toolSelection": {
    "stage1": {
      "template": "INFORMATION GATHERING PHASE\n\nUser request: \"{userRequest}\"\n\n{systemContext}\n\nAvailable information-gathering tools:\n{toolNames}\n\nSelect the BEST tool to gather relevant information for this request. Consider the project structure shown above when choosing which tool would be most helpful.\n\nRespond: {\"tool\": \"name\"} or {\"tool\": null}",
      "temperature": 0.1,
      "maxTokens": 100,
      "useFastModel": true
    }
  },
  "argumentGeneration": {
    "fastModel": {
      "template": "Generate tool arguments from user request.\n\n{systemContext}\n\nTool: {toolName}\nUser request: \"{userRequest}\"\n\nParameters:\n{params}\n\nCommon patterns:\n- For relative_path: use the directory the user mentions (e.g. \"src\" if they say \"src directory\"), or \".\" only if they mean current/root directory\n- For file_mask patterns: use glob patterns like \"*\", \"*.js\", \"*.ts\", \"config.*\" (e.g. use \"*\" instead of \".*\"). Match the file type user mentions (*.ts for TypeScript, *.js for JavaScript, etc.)\n- For boolean flags: true if mentioned (recursive, etc.)\n- OMIT optional parameters that have good defaults unless user specifically requests different values\n- When setting paths for files mentioned in the user request, check if they are listed in the project structure above and use the correct paths from the project structure\n\nRespond ONLY with JSON: {\"args\": {\"param\": \"value\"}}\n\nResponse:",
      "temperature": 0.1,
      "useFastModel": true
    },
    "fullModel": {
      "template": "You are a helpful assistant that generates tool arguments.\n\n{systemContext}\n\nUser request: \"{userRequest}\"\nSelected tool: {toolName}\n\nTool description: {toolDescription}\n\nParameters:\n{params}\n\nINSTRUCTIONS:\n1. Extract arguments from the user's request based on the tool's parameter requirements\n2. Use relative paths (e.g., \".\" for current directory) and appropriate boolean values\n3. For complex tools, carefully consider parameter relationships and validation\n4. When setting paths for files mentioned in the user request, check if they are listed in the project structure above and use the correct paths from the project structure\n5. Respond with: {\"args\": {\"param1\": \"value1\", \"param2\": \"value2\"}}\n\nRESPOND WITH ONLY THE JSON, NO OTHER TEXT.\n\nResponse:",
      "temperature": 0.1,
      "useFastModel": false
    }
  },
  "codeCompletion": {
    "completion": {
      "template": "You are an efficient code completion assistant. Your goal is to save the developer time by writing as much useful, correct code as possible.\n\nFile: {filePath}\nCode before cursor: {codeBeforeCursor}\nCode after cursor: {codeSuffix}\n\nYour response must start with the exact text \"{codeBeforeCursor}\" character-for-character, then continue with your completion, and include the suffix \"{codeSuffix}\". Provide a meaningful completion that implements or extends the code logically. Write clean, well-typed code.\n\nIMPORTANT: Respond with plain text only. Do not use code blocks, markdown formatting, or backticks. Do not add explanations or comments after the code. Only provide the completed code.",
      "temperature": 0.3,
      "maxTokens": 500,
      "useFastModel": false
    }
  },
  "toolGuidance": {
    "usageHints": {
      "list_dir": "USE WHEN: user asks \"what files are in\", \"list files\", \"show directory contents\". IMPORTANT: Instructions should explicitly specify whether to search recursively or not.",
      "find_file": "USE WHEN: user wants to find files by name like \"find config.json\", \"find *.js files\", \"locate main.py\". IMPORTANT: Searches recursively through all subdirectories. Only ONE file pattern can be searched at a time.",
      "replace_regex": "USE WHEN: user wants to replace, modify, or update text patterns across files like \"change all console.log to logger\", \"replace function name\", \"update imports\"",
      "search_for_pattern": "USE WHEN: user wants to search for text inside files like \"search for TODO\", \"find all console.log\", \"show me the imports\"",
      "restart_language_server": "USE WHEN: user mentions language server errors, outdated symbols, or requests explicit restart of language analysis",
      "get_symbols_overview": "USE WHEN: user wants to understand code structure like \"what classes\", \"show me the methods\", \"analyze this codebase\"",
      "find_symbol": "USE WHEN: user looks for specific functions, classes like \"find the authenticate method\", \"where is the User class\"",
      "find_referencing_symbols": "USE WHEN: user wants to see where code is used like \"what calls this function\", \"find usages\"",
      "replace_symbol_body": "USE WHEN: user wants to replace entire function/method/class bodies like \"rewrite this function\", \"replace the method implementation\"",
      "insert_after_symbol": "USE WHEN: user wants to add new code after existing functions/classes like \"add a new method after this one\", \"insert function below\"",
      "insert_before_symbol": "USE WHEN: user wants to add code before existing functions/classes like \"add import statement\", \"insert helper function above\"",
      "write_memory": "USE WHEN: user shares important project info that should be remembered like \"this uses PostgreSQL\", \"the auth flow works like...\", key insights",
      "read_memory": "USE WHEN: you need to recall previously stored project information that's relevant to current task",
      "list_memories": "USE WHEN: you need to see what project information has been previously stored",
      "delete_memory": "USE WHEN: user explicitly asks to remove outdated or incorrect stored information",
      "activate_project": "USE WHEN: user wants to switch to or work on a different project",
      "remove_project": "USE WHEN: user explicitly asks to remove a project from configuration",
      "switch_modes": "USE WHEN: user wants to change how the assistant behaves like \"switch to planning mode\", \"use interactive mode\"",
      "get_current_config": "USE WHEN: user asks about current settings, active project, or available tools/modes",
      "check_onboarding_performed": "USE WHEN: starting work on a project to verify if setup is complete",
      "onboarding": "USE WHEN: project hasn't been set up yet and needs initial configuration",
      "think_about_collected_information": "USE WHEN: after gathering info from multiple tools to analyze if it's sufficient for the task",
      "think_about_task_adherence": "USE WHEN: before making code changes to ensure you're still addressing the user's original request",
      "think_about_whether_you_are_done": "USE WHEN: you believe the user's request has been completed",
      "summarize_changes": "USE WHEN: after completing code modifications to explain what was changed",
      "prepare_for_new_conversation": "USE WHEN: user explicitly requests preparation for ending current session",
      "initial_instructions": "USE WHEN: starting any programming task to get project-specific guidance",
      "resolve-library-id": "USE WHEN: user asks for a library ID or as a first step in obtaining a library ID for library or package documentation before calling get-library-docs",
      "get-library-docs": "USE WHEN: retrieving documentation using a library ID that was previously obtained from resolve-library-id"
    },
    "fastModelTools": [
      "list_dir",
      "find_file",
      "read_memory",
      "list_memories",
      "get_current_config",
      "check_onboarding_performed",
      "resolve-library-id",
      "get-library-docs"
    ],
    "readOnlyTools": [
      "list_dir",
      "find_file",
      "search_for_pattern",
      "get_symbols_overview",
      "find_symbol",
      "find_referencing_symbols",
      "read_memory",
      "list_memories",
      "get_current_config",
      "check_onboarding_performed",
      "resolve-library-id",
      "get-library-docs"
    ],
    "argumentHints": {
      "find_file": {
        "file_mask": "Use glob patterns like '*.js' or 'config.*', NOT regex patterns like '.*' (use '*' instead)"
      },
      "get_symbols_overview": {
        "max_answer_chars": "Use positive numbers (e.g. 5000, 10000). DO NOT use 0 - it means 'no characters allowed' and will cause errors. Omit this parameter to allow unlimited length."
      },
      "find_referencing_symbols": {
        "max_answer_chars": "Use positive numbers (e.g. 5000, 10000). DO NOT use 0 - it means 'no characters allowed' and will cause errors. Omit this parameter to allow unlimited length."
      },
      "search_for_pattern": {
        "max_answer_chars": "Use positive numbers (e.g. 5000, 10000). DO NOT use 0 - it means 'no characters allowed' and will cause errors. Omit this parameter to allow unlimited length."
      },
      "find_symbol": {
        "max_answer_chars": "Use positive numbers (e.g. 5000, 10000). DO NOT use 0 - it means 'no characters allowed' and will cause errors. Omit this parameter to allow unlimited length."
      }
    }
  },
  "responseGeneration": {
    "toolResultsStreaming": {
      "template": "Tool Execution Results:\n{toolResults}\nIMPORTANT: The tools above were executed on your codebase. Even if a tool returned no results, it means the operation was performed successfully. Based on the tool execution results above, you have two options:\n\n1. If you have enough information to satisfy the user's query, provide a helpful and accurate response and end the conversation.\n\n2. If you need to run more tools to provide better assistance, create a plan. Format your response as JSON:\n\n{\n  \"main_objective\": \"Brief description of what you're trying to accomplish\",\n  \"next_step\": {\n    \"purpose\": \"What this step will accomplish\",\n    \"tool\": \"tool_name\",\n    \"prompt\": \"Clear request for the tool to execute\"\n  },\n  \"future_steps\": [\n    \"Step 2 description\",\n    \"Step 3 description\"\n  ]\n}\n\nChoose the approach that best serves the user's needs."
    },
    "planDecision": {
      "template": "Based on the assistant tool results above, you have two options:\n\n1. If you have enough information to provide a complete answer, respond directly to the user.\n\n2. If you need additional information to provide better assistance, create a plan in JSON format:\n\n{\n  \"main_objective\": \"Brief description of the overall goal\",\n  \"conclusion_from_assistant_data\": \"Summary of what you learned from the assistant data that may be needed for following steps\",\n  \"assistant_data_was_helpful\": true,\n  \"next_step\": {\n    \"objective\": \"What this step will accomplish\",\n    \"tool\": \"tool_name\",\n    \"prompt\": \"Clear instruction for the tool (write as a sentence, not as final arguments). Must contain all details necessary to execute the tool without knowledge beyond the provided project structure and should not be vague in any way.\"\n  },\n  \"later_steps\": [\n    \"Step 2 description (after next_step)\",\n    \"Step 3 description\"\n  ]\n}\n\nAvailable tools:\n{toolNamesAndHints}\n\nIMPORTANT: Respond with raw JSON only. Do NOT wrap the JSON in markdown code blocks or backticks.\n\nSet assistant_data_was_helpful to true if the tool results provided useful information, false if they didn't help towards answering the user's question."
    },
    "planIteration": {
      "template": "{systemPrompt}\n\nUser Request: {userPrompt}\n\nMain Objective: {objective}\n\nCompleted Steps:\n{completedSteps}\n\nCurrent Step:\n{currentStep}\n\nNext Steps:\n{nextSteps}\n\nAvailable tools:\n{toolNamesAndHints}\n\nIMPORTANT: Before choosing your next action, CAREFULLY REVIEW the completed steps above to understand:\n1. What conclusions were reached in previous steps\n2. Which tools provided useful results vs. inadequate/minimal results\n3. What approaches have already been tried and failed\n\nAVOID REPETITIVE BEHAVIOR:\n- DO NOT call the same tool with the same parameters if it already produced inadequate results\n- If a tool returns minimal/unhelpful results, note this in notes_to_future_self and try a different approach\n- Learn from previous step conclusions to avoid falling into the same traps\n\nIn your notes_to_future_self, be specific about:\n- Tools that returned errors or poor results and should be avoided for similar tasks\n- What specific approaches to avoid based on previous iterations\n- Key insights that should guide future decisions\n\nBased on the results above, decide your next action with ONE of these three response formats:\n\n**Option 1: Continue working on current step** (if you need more information for the current step)\n{\n  \"current_step\": {\n    \"notes_to_future_self\": \"What you learned, what you still need, and any mistakes to avoid from previous iterations\",\n    \"tool\": \"tool_name\",\n    \"prompt\": \"Clear instruction for the tool (write as a sentence, not as final arguments). Must contain all details necessary to execute the tool without knowledge beyond the provided project structure and should not be vague in any way.\"\n  }\n  // Optional: \"later_steps\": [\"Updated step objective descriptions\"] - only include if you need to change future steps from the initial plan\n}\n\n**Option 2: Complete current step and move to next** (if current step is done but main objective is not complete)\n{\n  \"current_step\": {\n    \"completed\": true,\n    \"success\": true,\n    \"notes_to_future_self\": \"Summary of what was accomplished in this step and any insights or mistakes to remember\"\n  },\n  \"next_step\": {\n    \"objective\": \"What the next step will accomplish\",\n    \"tool\": \"tool_name\",\n    \"prompt\": \"Clear instruction for the tool (write as a sentence, not as final arguments). Must contain all details necessary to execute the tool without knowledge beyond the provided project structure and should not be vague in any way.\"\n  }\n  // Optional: \"later_steps\": [\"Updated step objective descriptions\"] - only include if you need to change future steps from the initial plan\n}\n\nIMPORTANT: later_steps is optional - only include it if you need to modify future steps from the initial plan. It should contain only objective descriptions as strings, NOT objects with tool/prompt details.\n\nSet success to true if the step's objective was achieved, false if the step was completed but didn't achieve its objective (e.g., turned out to be a red herring or dead end).\n\n**Option 3: Provide final conclusion** (if main objective is complete)\nProvide your final answer or conclusion as plain text.\n\nIMPORTANT: For Options 1 and 2, respond with raw JSON only. Do NOT wrap the JSON in markdown code blocks or backticks.\n\nChoose the option that best serves completing the main objective."
    },
    "finalIteration": {
      "template": "Main Objective: {objective}\n\nCompleted Steps:\n{completedSteps}\n\nCurrent Step Status: {currentStepStatus}\n\nBased on all the work completed above, please provide a comprehensive final conclusion that addresses the main objective. Summarize what has been accomplished, key findings, and provide a complete answer to the original request."
    }
  },
  "systemMessages": {
    "customSystemPrompt": {
      "template": "You are an AI assistant. You are a skilled developer with deep knowledge of programming languages, frameworks, and development best practices. If including code snippets, always start code blocks with the programming language and file name (e.g., ```{language} path/to/file).",
      "enabled": true
    },
    "mcpInitializing": {
      "template": "Local MCP Hub is still initializing the code analysis tools (Serena & Context7). This usually takes 10-30 seconds after startup. Please try your request again in a moment.\n\nCurrent status:\n- Hub server: Running\n- Ollama connection: Connected\n- MCP tools: Loading...\n\nYou can check initialization status at: http://localhost:{port}/health"
    },
    "toolPermissionError": {
      "template": "I'd like to use the {toolName} tool to answer your question, but I encountered an error: {error}. Would you like me to try a different approach?"
    },
    "toolPermissionRequest": {
      "template": "I'd like to use the {toolName} tool with these parameters: {args}. This tool may modify files or system state. Would you like me to proceed? (Please respond with 'yes' to continue or 'no' to cancel)"
    }
  }
}