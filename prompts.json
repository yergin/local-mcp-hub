{
  "connectionTest": {
    "main": {
      "message": "Hello, this is a connection test.",
      "temperature": 0.7,
      "maxTokens": 100,
      "useFastModel": false
    },
    "fast": {
      "message": "Test",
      "temperature": 0.7,
      "maxTokens": 50,
      "useFastModel": true
    }
  },
  "toolSelection": {
    "stage1": {
      "template": "You are a helpful assistant that can use tools to help users.\n\nUser request: \"{userRequest}\"\n\nAvailable tools:\n{toolNames}\n\nINSTRUCTIONS:\n1. Check if the user's request matches any tool's \"USE WHEN\" criteria\n2. If a tool matches, respond with: {\"tool\": \"tool_name\"}\n3. If no tool matches, respond with: {\"tool\": null}\n\nRESPOND WITH ONLY THE JSON, NO OTHER TEXT.\n\nResponse:",
      "temperature": 0.1,
      "maxTokens": 100,
      "useFastModel": true
    }
  },
  "argumentGeneration": {
    "fastModel": {
      "template": "Generate tool arguments from user request.\n\nTool: {toolName}\nUser request: \"{userRequest}\"\n\nParameters:\n{params}\n\nCommon patterns:\n- For directory operations: use \".\" for current directory\n- For file_mask patterns: use glob patterns like \"*\", \"*.js\", \"config.*\" (NOT regex like \".*\")\n- For boolean flags: true if mentioned (recursive, etc.)\n- OMIT optional parameters that have good defaults unless user specifically requests different values\n\nRespond ONLY with JSON: {\"args\": {\"param\": \"value\"}}\n\nResponse:",
      "temperature": 0.1,
      "useFastModel": true
    },
    "fullModel": {
      "template": "You are a helpful assistant that generates tool arguments.\n\nUser request: \"{userRequest}\"\nSelected tool: {toolName}\n\nTool description: {toolDescription}\n\nParameters:\n{params}\n\nINSTRUCTIONS:\n1. Extract arguments from the user's request based on the tool's parameter requirements\n2. Use relative paths (e.g., \".\" for current directory) and appropriate boolean values\n3. For complex tools, carefully consider parameter relationships and validation\n4. Respond with: {\"args\": {\"param1\": \"value1\", \"param2\": \"value2\"}}\n\nRESPOND WITH ONLY THE JSON, NO OTHER TEXT.\n\nResponse:",
      "temperature": 0.1,
      "useFastModel": false
    }
  },
  "codeCompletion": {
    "completion": {
      "template": "You are an efficient code completion assistant. Your goal is to save the developer time by writing as much useful, correct code as possible.\n\nFile: {filePath}\nCode before cursor: {codeBeforeCursor}\nCode after cursor: {codeSuffix}\n\nYour response must start with the exact text \"{codeBeforeCursor}\" character-for-character, then continue with your completion, and include the suffix \"{codeSuffix}\". Provide a meaningful completion that implements or extends the code logically. Write clean, well-typed code.\n\nIMPORTANT: Respond with plain text only. Do not use code blocks, markdown formatting, or backticks. Do not add explanations or comments after the code. Only provide the completed code.",
      "temperature": 0.3,
      "maxTokens": 500,
      "useFastModel": false
    }
  },
  "toolGuidance": {
    "usageHints": {
      "list_dir": "USE WHEN: user asks \"what files are in\", \"list files\", \"show directory contents\", \"what's in this folder\", \"explore directory structure\"",
      "find_file": "USE WHEN: user wants to find files by NAME/PATH/EXTENSION like \"find config.json\", \"find *.js files\", \"where is package.json\", \"locate main.py\"",
      "replace_regex": "USE WHEN: user wants to replace, modify, or update text patterns across files like \"change all console.log to logger\", \"replace function name\", \"update imports\"",
      "search_for_pattern": "USE WHEN: user wants to search for TEXT/CONTENT/PATTERNS inside files like \"search for TODO\", \"find all console.log\", \"what does this file do\", \"show me the imports\"",
      "restart_language_server": "USE WHEN: user mentions language server errors, outdated symbols, or requests explicit restart of language analysis",
      "get_symbols_overview": "USE WHEN: user wants to understand code structure like \"what classes are in this file\", \"show me the methods\", \"analyze this codebase\"",
      "find_symbol": "USE WHEN: user looks for specific functions, classes, methods like \"find the authenticate method\", \"where is the User class\", \"show me all init functions\"",
      "find_referencing_symbols": "USE WHEN: user wants to see where code is used like \"what calls this function\", \"find usages\", \"where is this class referenced\"",
      "replace_symbol_body": "USE WHEN: user wants to replace entire function/method/class bodies like \"rewrite this function\", \"replace the method implementation\"",
      "insert_after_symbol": "USE WHEN: user wants to add new code after existing functions/classes like \"add a new method after this one\", \"insert function below\"",
      "insert_before_symbol": "USE WHEN: user wants to add code before existing functions/classes like \"add import statement\", \"insert helper function above\"",
      "write_memory": "USE WHEN: user shares important project info that should be remembered like \"this uses PostgreSQL\", \"the auth flow works like...\", key insights",
      "read_memory": "USE WHEN: you need to recall previously stored project information that's relevant to current task",
      "list_memories": "USE WHEN: you need to see what project information has been previously stored",
      "delete_memory": "USE WHEN: user explicitly asks to remove outdated or incorrect stored information",
      "activate_project": "USE WHEN: user wants to switch to or work on a different project",
      "remove_project": "USE WHEN: user explicitly asks to remove a project from configuration",
      "switch_modes": "USE WHEN: user wants to change how the assistant behaves like \"switch to planning mode\", \"use interactive mode\"",
      "get_current_config": "USE WHEN: user asks about current settings, active project, or available tools/modes",
      "check_onboarding_performed": "USE WHEN: starting work on a project to verify if setup is complete",
      "onboarding": "USE WHEN: project hasn't been set up yet and needs initial configuration",
      "think_about_collected_information": "USE WHEN: after gathering info from multiple tools to analyze if it's sufficient for the task",
      "think_about_task_adherence": "USE WHEN: before making code changes to ensure you're still addressing the user's original request",
      "think_about_whether_you_are_done": "USE WHEN: you believe the user's request has been completed",
      "summarize_changes": "USE WHEN: after completing code modifications to explain what was changed",
      "prepare_for_new_conversation": "USE WHEN: user explicitly requests preparation for ending current session",
      "initial_instructions": "USE WHEN: starting any programming task to get project-specific guidance",
      "resolve-library-id": "USE WHEN: user asks about library docs but you need to find the correct library identifier first",
      "get-library-docs": "USE WHEN: user asks about documentation for a specific library or framework like \"how to use React hooks\", \"FastAPI documentation\""
    },
    "fastModelTools": [
      "list_dir",
      "find_file",
      "read_memory",
      "list_memories",
      "get_current_config",
      "check_onboarding_performed",
      "resolve-library-id",
      "get-library-docs"
    ],
    "safeTools": [
      "list_dir",
      "find_file",
      "search_for_pattern",
      "get_symbols_overview",
      "find_symbol",
      "find_referencing_symbols",
      "read_memory",
      "list_memories",
      "get_current_config",
      "check_onboarding_performed",
      "resolve-library-id",
      "get-library-docs"
    ]
  },
  "responseGeneration": {
    "toolResultsStreaming": {
      "template": "Tool Execution Results:\n{toolResults}\nIMPORTANT: The tools above were executed on your codebase. Even if a tool returned no results, it means the operation was performed successfully. Based on the tool execution results above, provide a helpful and accurate response to the user."
    },
    "toolResultsNonStreaming": {
      "template": "Tool Results:\n{toolResults}\nBased on the tool results above, provide a helpful and accurate response to the user. Summarize the information clearly and answer their question."
    }
  },
  "systemMessages": {
    "customSystemPrompt": {
      "template": "You are an AI assistant called Jerry. You are a skilled developer with deep knowledge of programming languages, frameworks, and development best practices. If including code snippets, always start code blocks with the programming language and file name (e.g., ```{language} path/to/file). Please start by introducing your self.",
      "enabled": true
    },
    "mcpInitializing": {
      "template": "Local MCP Hub is still initializing the code analysis tools (Serena & Context7). This usually takes 10-30 seconds after startup. Please try your request again in a moment.\n\nCurrent status:\n- Hub server: Running\n- Ollama connection: Connected\n- MCP tools: Loading...\n\nYou can check initialization status at: http://localhost:{port}/health"
    },
    "toolPermissionError": {
      "template": "I'd like to use the {toolName} tool to answer your question, but I encountered an error: {error}. Would you like me to try a different approach?"
    },
    "toolPermissionRequest": {
      "template": "I'd like to use the {toolName} tool with these parameters: {args}. This tool may modify files or system state. Would you like me to proceed? (Please respond with 'yes' to continue or 'no' to cancel)"
    }
  }
}