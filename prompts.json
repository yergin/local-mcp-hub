{
  "connectionTest": {
    "main": {
      "message": "Hello, this is a connection test.",
      "temperature": 0.7,
      "maxTokens": 100,
      "useFastModel": false
    },
    "fast": {
      "message": "Test",
      "temperature": 0.7,
      "maxTokens": 50,
      "useFastModel": true
    }
  },
  "toolSelection": {
    "stage1": {
      "template": "You are a proactive assistant who will gather detailed information in order to answer a user request.\n\n# User Request\n\"{userRequest}\"\n\n# Current Workspace Files (non-exhaustive)\n{projectFileStructure}\n\n# Available information-gathering tools\n{toolNames}\n\n# Your Response\nStart this investigation using any of the tools mentioned. Specify which tool you will start with and what you will use it for specifically. Do not give a general description of what the tool does, say what you will use it to do. Keep in mind that the list of current workspace files above is already known information (if relevant to the user request) and your choice will be used to reveal further information related to the request. If you see what looks like a key file in the list of current workspace files with regards to the user request, inspect it directly.\n\nRespond ONLY with JSON: {\"tool\": \"<tool_name>\", \"prompt\": \"<what exactly you will do with this tool>\"} or {\"tool\": null}\n\nResponse:",
      "temperature": 0.1,
      "maxTokens": 100,
      "useFastModel": true
    }
  },
  "argumentGeneration": {
    "fastModel": {
      "template": "Generate tool arguments from user request.\n\n# Current Workspace Files (non-exhaustive)\n{projectFileStructure}\n\n# User Request\n\"{userRequest}\"\n\n# Tool: {toolName}\n{toolDescription}\n\n## Parameters\n{params}\n\n# Your Response\n- DO NOT INCLUDE optional parameters that have good defaults unless user specifically requests different values\n- When setting paths for files mentioned in the user request, check whether these are listed in the current workspace files above and USE THE CORRECT PATHS as shown in current workspace files.\n- Respond with exact argument values not generic values.\n\nRespond ONLY with JSON: {\"args\": {\"param\": \"value\"}}\n\nResponse:",
      "temperature": 0.1,
      "useFastModel": true
    },
    "fullModel": {
      "template": "You are a helpful assistant that generates tool arguments.\n\n# Current Workspace Files (non-exhaustive)\n{projectFileStructure}\n\nUser request: \"{userRequest}\"\n# Selected Tool: {toolName}\n{toolDescription}\n\n## Parameters\n{params}\n\n# Instructions\n1. Extract arguments from the user's request based on the tool's parameter requirements\n2. Use relative paths (e.g., \".\" for current directory) and appropriate boolean values\n3. For complex tools, carefully consider parameter relationships and validation\n4. When setting paths for files mentioned in the user request, check if they are listed in the current workspace files above and use the correct paths as shown in the current workspace files.\n5. Respond with: {\"args\": {\"param1\": \"value1\", \"param2\": \"value2\"}}\n\nRESPOND WITH ONLY THE JSON, NO OTHER TEXT.\n\nResponse:",
      "temperature": 0.1,
      "useFastModel": false
    }
  },
  "codeCompletion": {
    "completion": {
      "template": "You are an efficient code completion assistant. Your goal is to save the developer time by writing as much useful, correct code as possible.\n\nFile: {filePath}\nCode before cursor: {codeBeforeCursor}\nCode after cursor: {codeSuffix}\n\nYour response must start with the exact text \"{codeBeforeCursor}\" character-for-character, then continue with your completion, and include the suffix \"{codeSuffix}\". Provide a meaningful completion that implements or extends the code logically. Write clean, well-typed code.\n\nIMPORTANT: Respond with plain text only. Do not use code blocks, markdown formatting, or backticks. Do not add explanations or comments after the code. Only provide the completed code.",
      "temperature": 0.3,
      "maxTokens": 500,
      "useFastModel": false
    }
  },
  "toolGuidance": {
    "usageHints": {
      "read_file": "USE WHEN: you need to examine the contents of one specific file only like \"read config.json\", \"show me the code in hub.ts\", \"what's in the README\" (this cannot read multiple files)",
      "list_dir": "USE WHEN: user asks \"what files are in\", \"list files\", \"show directory contents\". IMPORTANT: Instructions should explicitly specify whether to search recursively or not.",
      "find_file": "USE WHEN: user wants to find files by name like \"find config.json\", \"find *.js files\", \"locate main.py\". IMPORTANT: Searches recursively through all subdirectories. Only ONE file pattern can be searched at a time.",
      "replace_regex": "USE WHEN: user wants to replace, modify, or update text patterns across files like \"change all console.log to logger\", \"replace function name\", \"update imports\"",
      "search_for_pattern": "USE WHEN: user wants to search for text inside files like \"search for TODO\", \"find all console.log\", \"show me the imports\"",
      "restart_language_server": "USE WHEN: user mentions language server errors, outdated symbols, or requests explicit restart of language analysis",
      "get_symbols_overview": "USE WHEN: user wants to understand code structure like \"what classes\", \"show me the methods\", \"analyze this codebase\"",
      "find_symbol": "USE WHEN: user looks for specific functions, classes like \"find the authenticate method\", \"where is the User class\"",
      "find_referencing_symbols": "USE WHEN: user wants to see where code is used like \"what calls this function\", \"find usages\"",
      "replace_symbol_body": "USE WHEN: user wants to replace entire function/method/class bodies like \"rewrite this function\", \"replace the method implementation\"",
      "insert_after_symbol": "USE WHEN: user wants to add new code after existing functions/classes like \"add a new method after this one\", \"insert function below\"",
      "insert_before_symbol": "USE WHEN: user wants to add code before existing functions/classes like \"add import statement\", \"insert helper function above\"",
      "write_memory": "USE WHEN: user shares important project info that should be remembered like \"this uses PostgreSQL\", \"the auth flow works like...\", key insights",
      "read_memory": "USE WHEN: you need to recall previously stored project information that's relevant to current task",
      "list_memories": "USE WHEN: you need to see what project information has been previously stored",
      "delete_memory": "USE WHEN: user explicitly asks to remove outdated or incorrect stored information",
      "activate_project": "USE WHEN: user wants to switch to or work on a different project",
      "remove_project": "USE WHEN: user explicitly asks to remove a project from configuration",
      "switch_modes": "USE WHEN: user wants to change how the assistant behaves like \"switch to planning mode\", \"use interactive mode\"",
      "get_current_config": "USE WHEN: user asks about current settings, active project, or available tools/modes",
      "check_onboarding_performed": "USE WHEN: starting work on a project to verify if setup is complete",
      "onboarding": "USE WHEN: project hasn't been set up yet and needs initial configuration",
      "think_about_collected_information": "USE WHEN: after gathering info from multiple tools to analyze if it's sufficient for the task",
      "think_about_task_adherence": "USE WHEN: before making code changes to ensure you're still addressing the user's original request",
      "think_about_whether_you_are_done": "USE WHEN: you believe the user's request has been completed",
      "summarize_changes": "USE WHEN: after completing code modifications to explain what was changed",
      "prepare_for_new_conversation": "USE WHEN: user explicitly requests preparation for ending current session",
      "initial_instructions": "USE WHEN: starting any programming task to get project-specific guidance",
      "resolve-library-id": "USE WHEN: user asks for a library ID or as a first step in obtaining a library ID for library or package documentation before calling get-library-docs",
      "get-library-docs": "USE WHEN: retrieving documentation using a library ID that was previously obtained from resolve-library-id"
    },
    "fastModelTools": [
      "list_dir",
      "find_file",
      "read_memory",
      "list_memories",
      "get_current_config",
      "check_onboarding_performed",
      "resolve-library-id",
      "get-library-docs",
      "read_file"
    ],
    "readOnlyTools": [
      "read_file",
      "list_dir",
      "find_file",
      "search_for_pattern",
      "get_symbols_overview",
      "find_symbol",
      "find_referencing_symbols",
      "read_memory",
      "list_memories",
      "get_current_config",
      "check_onboarding_performed",
      "resolve-library-id",
      "get-library-docs"
    ],
    "toolsBlackList": [
      "get_symbols_overview",
      "find_symbol",
      "find_referencing_symbols",
      "read_memory",
      "list_memories",
      "get_current_config",
      "check_onboarding_performed",
      "resolve-library-id",
      "get-library-docs",
      "restart_language_server",
      "replace_symbol_body",
      "insert_after_symbol",
      "insert_before_symbol",
      "write_memory",
      "read_memory",
      "list_memories",
      "delete_memory",
      "activate_project",
      "remove_project",
      "switch_modes",
      "onboarding",
      "think_about_collected_information",
      "think_about_task_adherence",
      "think_about_whether_you_are_done",
      "summarize_changes",
      "prepare_for_new_conversation",
      "initial_instructions",
      "resolve-library-id"
    ],
    "argumentHints": {
      "find_file": {
        "file_mask": "Use glob patterns like '*.js' or 'config.*', NOT regex patterns like '.*' (use '*' instead)"
      },
      "get_symbols_overview": {
        "max_answer_chars": "Use positive numbers (e.g. 5000, 10000). DO NOT use 0 - it means 'no characters allowed' and will cause errors. Omit this parameter to allow unlimited length."
      },
      "find_referencing_symbols": {
        "max_answer_chars": "Use positive numbers (e.g. 5000, 10000). DO NOT use 0 - it means 'no characters allowed' and will cause errors. Omit this parameter to allow unlimited length."
      },
      "search_for_pattern": {
        "max_answer_chars": "Use positive numbers (e.g. 5000, 10000). DO NOT use 0 - it means 'no characters allowed' and will cause errors. Omit this parameter to allow unlimited length."
      },
      "find_symbol": {
        "max_answer_chars": "Use positive numbers (e.g. 5000, 10000). DO NOT use 0 - it means 'no characters allowed' and will cause errors. Omit this parameter to allow unlimited length."
      },
      "read_file": {
        "start_line": "Do NOT include this parameter unless specified in the user request.",
        "max_lines": "Do NOT include this parameter unless specified in the user request."
      },
      "*": {
        "relative_path": "use the directory the user mentions (e.g. \"src\" if they say \"src directory\", or \".\" only if they mean current/root directory)"
      }
    }
  },
  "responseGeneration": {
    "planDecision": {
      "template": "{systemPrompt}\n\n# Current Workspace Files (non-exhaustive)\n{projectFileStructure}\n\n# User Request\n{userPrompt}\n\n# Junior Assistant\nA junior assistant thought to run the following tool for you.\n{planDecisionAssistant}\n\nBased on both the list of Current Workspace Files and the junior assistant tool results above, you have two options:\n\n1. If you have enough information to provide a complete answer, respond directly to the user.\n\n2. If you need additional information to provide better assistance, create a plan in JSON format:\n\n{\n  \"main_objective\": \"Concise description of the overall goal\",\n  \"conclusion_from_junior_assistant_data\": \"A thorough account of your findings based on the junior assistant data and any information that may be needed for completing the next steps in your plan\",\n  \"junior_assistant_data_was_helpful\": true,\n  \"next_step\": {\n    \"objective\": \"What this step will accomplish\",\n    \"tool\": \"tool_name\",\n    \"prompt\": \"Precise and concise instructions for the tool (write as a sentence, not as final arguments). Must contain all details necessary to execute the tool without knowledge beyond the provided list of current workspace files and should not be vague in any way.\"\n  },\n  \"later_steps\": [\n    \"Step 2 objective (once next_step objective is complete)\",\n    \"Step 3 objective\"\n  ]\n}\n\n# Available Tools\n{toolNamesAndHints}\n\nIf the user prompt requires broad knowledge of the codebase, start by reading the README file if there is one. Do not search for files that are already listed in the Current Workspace Files, inspect them straight away.\n\nIMPORTANT: Respond with raw JSON only. Do NOT wrap the JSON in markdown code blocks or backticks.\n\nSet junior_assistant_data_was_helpful to true only if the tool results provided new information not already provided that helped towards answering the user's question otherwise set it to false.\n\nResponse:"
    },
    "planIteration": {
      "template": "{systemPrompt}\n\n# Current Workspace Files (non-exhaustive)\n{projectFileStructure}\n\n# User Request\n{userPrompt}\n\n# Your Plan\n\n## Main Objective\n{objective}\n\n## Completed Steps\n{completedSteps}\n\n## Current Step\n{currentStep}\n\n## Later Steps:\n{nextSteps}\n\n# Available Tools\n{toolNamesAndHints}\n\n# Your Response\nBased on the results so far which include your current step and completed steps, choose which case fits your situation completely and respond according to the case's response instructions:\n\n## Case 1\nYou have not completely reached your objective for this step and believe you can better reach your step's objective by executing more tools. You have reviewed the tools that were previously run both in this step and in the completed steps (shown above) and do not doubt that you can obtain the results you want with different tool calls, only using the tools provided in the above list. You will not make equivalent prompts to those you have made before. If you require various iterations to reach the step's objective, you know how to use the tools iteratively to reach it. You have examine the arguments chosen by the junior assistant from your previous prompts and understand why the results are what they are. You will provide more detailed instruction in next prompts to obtain different results.\n\nIMPORTANT: If this is the 3rd time you are choosing this case without getting significantly closer to your step's objective, choose option 2 or 3.\n\nIf this is your case AND you have not chosen this case for the 3rd time without getting significantly closer to your step's objective (see above), respond with the following JSON, replacing values with your own:\n\n{\n\"current_step\": {\n\"notes_to_future_self\": \"A thorough account of what you have learnt from the very last Completed Junior Assistant Task listed above. Also include very detailed information from your Current Step's existing notes (if any) as they will be deleted and replaced with these notes. Do not reiterate notes from the Completed Steps section, they will always be made available and must not me reiterated here.\",\n\"tool\": \"the tool_name for tool you are now going to use\",\n\"prompt\": \"Clear instructions for the tool you will now use, adhering to the guidelines above (write as a sentence, not as final arguments). This prompt must contain all details necessary to execute the tool without knowledge beyond the provided list of current workspace files and should not be vague in any way.\"\n}\n}\n\nIMPORTANT: Do NOT wrap the JSON in markdown code blocks or backticks. The JSON must be valid.\n\n## Case 2\nYou have have not yet reached the main objective for the user's request and you have an idea of what to do next. You have plans which don't involve repeating any of the steps and don't involve the same tool calls you previously made.\n\nIMPORTANT: If you future plans involve repeating steps vaguely equivalent to any of the previous steps, either come up with a plan that does fit this cases criteria or conclude with Case 3.\n\nIf this is your case, respond with the following JSON, replacing values with your own:\n\n{\n\"current_step\": {\n\"notes_to_future_self\": \"A thorough account of what you have learnt from the Completed Junior Assistant Task Assistant listed above. Also include very detailed information from your current step's existing notes (if any) as they will be deleted and replaced with these notes. Do not reiterate notes from previous steps, they will always be made available and must not me reiterated here. Add any concluding remarks for this step.\",\n\"completed\": true,\n\"success\": true|false // true if the current objective was entirely achieved, otherwise false\n},\n\"next_step\": {\n\"objective\": \"What the next step will accomplish\",\n\"tool\": \"the tool_name for tool you are now going to use\",\n\"prompt\": \"Clear instructions for the tool, adhering to the guidelines outlined in Case 1 (write as a sentence, not as final arguments). This prompt must contain all details necessary to execute the tool without knowledge beyond the provided list of current workspace files and should not be vague in any way.\"\n}\n// Optional: \"later_steps\": [\"Updated step objective descriptions\"] - only include if you want to change you currentplans\n}\n\nIMPORTANT: Do NOT wrap the JSON in markdown code blocks or backticks. The JSON must be valid.\n\n## Case 3.\n\nCase 1 and 2 do not apply to you. Based on all the work completed above, please provide a comprehensive, final conclusion that addresses the user request. Summarize key findings, and provide a complete answer to the original request. If you did not completely reach your main objective, say why. Provide your final answer or conclusion as plain text.\n\nResponse:"
    },
    "finalIteration": {
      "template": "{systemPrompt}\n\n# Current Workspace Files (non-exhaustive)\n{projectFileStructure}\n\n# User Request\n{userPrompt}\n\n\n\n# Your Executed Plan\n\n## Main Objective\n{objective}\n\n## Previous Steps\n{completedSteps}\n\n## Current Step\n{currentStep}\n\n# Your Response\nBased on all the work completed above, please provide a comprehensive, final conclusion that addresses the user request. Summarize key findings, and provide a complete answer to the original request.\n\nResponse:"
    },
    "planDecisionAssistant": {
      "template": "- Prompt to junior assistant: \"{prompt}\"\n- Tool you chose: {tool}\n- Tool arguments junior assistant chose: {args}\n- Tool Results:\n\n{results}"
    },
    "currentStep": {
      "template": "### Objective\n{objective}\n\n#### Notes\n{notes}\n\n#### Junior Assistant Tasks\n{previousToolList}\n\n### Completed Junior Assistant Task\n- Your prompt: \"{prompt}\"\n- Tool you chose: {tool}\n- Tool arguments junior assistant chose: {args}\n- Tool Results:\n\n{results}"
    },
    "previousTool": {
      "template": "- Prompt to junior assistant: {prompt}\n  - Tool you chose: {tool}\n  - Tool arguments junior assistant chose: {args}"
    },
    "previousStep": {
      "template": "### {objective}\nSuccess: {success}\n\n#### Junior Assistant Tasks\n{previousToolList}\n\n#### Conclusion\n{conclusion}"
    }
  },
  "systemMessages": {
    "customSystemPrompt": {
      "template": "You are an AI assistant. You are a skilled developer with deep knowledge of programming languages, frameworks, and development best practices. If including code snippets, always start code blocks with the programming language and file name (e.g., ```{language} path/to/file).",
      "enabled": true
    },
    "mcpInitializing": {
      "template": "Local MCP Hub is still initializing the code analysis tools (Serena & Context7). This usually takes 10-30 seconds after startup. Please try your request again in a moment.\n\nCurrent status:\n- Hub server: Running\n- Ollama connection: Connected\n- MCP tools: Loading...\n\nYou can check initialization status at: http://localhost:{port}/health"
    },
    "toolPermissionError": {
      "template": "I'd like to use the {toolName} tool to answer your question, but I encountered an error: {error}. Would you like me to try a different approach?"
    },
    "toolPermissionRequest": {
      "template": "I'd like to use the {toolName} tool with these parameters: {args}. This tool may modify files or system state. Would you like me to proceed? (Please respond with 'yes' to continue or 'no' to cancel)"
    }
  }
}